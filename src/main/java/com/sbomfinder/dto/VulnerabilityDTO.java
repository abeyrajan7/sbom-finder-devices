package com.sbomfinder.dto;
import java.util.Map;
import java.util.List;
import java.util.HashMap;

public class VulnerabilityDTO {
    private String cveId;
    private String description;
    private String severity;
    private String sourceUrl;
    private String severityLevel;

    // Getters & Setters
    public String getCveId() { return cveId; }
    public void setCveId(String cveId) { this.cveId = cveId; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getSeverity() { return severity; }
    public void setSeverity(String severity) { this.severity = severity; }

    public String getSourceUrl() { return sourceUrl; }
    public void setSourceUrl(String sourceUrl) { this.sourceUrl = sourceUrl; }

    // Helper method to determine severity level
    public String getSeverityLevel() {
        if (severity == null || !severity.contains("/")) return "Unknown";

        try {
            String[] parts = severity.split("CVSS:3\\.[01]/");
            if (parts.length < 2) return "Unknown";
            String vector = parts[1];

            Map<String, String> metrics = new HashMap<>();
            for (String metric : vector.split("/")) {
                String[] kv = metric.split(":");
                if (kv.length == 2) metrics.put(kv[0], kv[1]);
            }

            double exploitability = calculateExploitability(metrics);
            double impact = calculateImpact(metrics);

            double score = 0.0;
            if (impact <= 0) return "None";

            if ("U".equals(metrics.get("S"))) {
                score = Math.min(impact + exploitability, 10);
            } else {
                score = Math.min(1.08 * (impact + exploitability), 10);
            }

            // Map score to level
            if (score >= 9.0) return "Critical";
            if (score >= 7.0) return "High";
            if (score >= 4.0) return "Medium";
            if (score > 0.0) return "Low";
            return "None";

        } catch (Exception e) {
            return "Unknown";
        }
    }

    public void setSeverityLevel(String severityLevel) {
        this.severityLevel = severityLevel;
    }

    private double calculateImpact(Map<String, String> metrics) {
        double iss = 1 - ((1 - conf(metrics)) * (1 - integ(metrics)) * (1 - avail(metrics)));
        if ("U".equals(metrics.get("S"))) {
            return 6.42 * iss;
        } else {
            return 7.52 * (iss - 0.029) - 3.25 * Math.pow(iss - 0.02, 15);
        }
    }

    private double calculateExploitability(Map<String, String> m) {
        return 8.22 *
                av(m) * ac(m) * pr(m, m.get("S")) * ui(m);
    }


    private double av(Map<String, String> m) {
        return switch (m.get("AV")) {
            case "N" -> 0.85;
            case "A" -> 0.62;
            case "L" -> 0.55;
            case "P" -> 0.2;
            default -> 0.0;
        };
    }

    private double ac(Map<String, String> m) {
        return "L".equals(m.get("AC")) ? 0.77 : 0.44;
    }

    private double pr(Map<String, String> m, String scope) {
        return switch (m.get("PR")) {
            case "N" -> 0.85;
            case "L" -> "U".equals(scope) ? 0.62 : 0.68;
            case "H" -> "U".equals(scope) ? 0.27 : 0.5;
            default -> 0.0;
        };
    }

    private double ui(Map<String, String> m) {
        return "N".equals(m.get("UI")) ? 0.85 : 0.62;
    }

    private double conf(Map<String, String> m) {
        return switch (m.get("C")) {
            case "H" -> 0.56;
            case "L" -> 0.22;
            default -> 0.0;
        };
    }

    private double integ(Map<String, String> m) {
        return switch (m.get("I")) {
            case "H" -> 0.56;
            case "L" -> 0.22;
            default -> 0.0;
        };
    }

    private double avail(Map<String, String> m) {
        return switch (m.get("A")) {
            case "H" -> 0.56;
            case "L" -> 0.22;
            default -> 0.0;
        };
    }

}
